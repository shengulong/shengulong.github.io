<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019-05 on 持之以恒</title>
    <link>/categories/2019-05/</link>
    <description>Recent content in 2019-05 on 持之以恒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 May 2019 00:57:43 +0800</lastBuildDate>
    
	<atom:link href="/categories/2019-05/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goroutine和进程、线程、协程</title>
      <link>/blog/2019/05/26/goroutine%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sun, 26 May 2019 00:57:43 +0800</pubDate>
      
      <guid>/blog/2019/05/26/goroutine%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>进程  内核进行调度，有CPU时间片的概念，进行抢占式调度（有多种调度算法）  线程  内核进行调度(内核级线程)，有CPU时间片的概念，进行抢占式调度（有多种调度算法）  协程  用户级线程，对内核是透明的，也就是系统并不知道有协程的存在，是完全由用户的程序自己调度的；因为是由用户程序自己控制，那么就很难像抢占式 调度那样做到强制的CPU控制权切换到其他进程/线程，通常只能进行协作式调度，需要协程自己主动把控制权转让出去之后，其他协程才能被执行到 用户自己调度  goroutine   goroutine就是协程，不同的是，Golang在runtime、系统调用等多方面对goroutine调度进行了封装和处理，当遇到长时间执行或者进行系统调用时， 会主动把当前goroutine的CPU (P) 转让出去，让其他goroutine能被调度并执行，也就是Golang从语言层面支持了协程
  go语言帮助用户进行调度
  不要通过共享内存通信，相反，通过通信共享内存
  内存消耗方面
 每个 goroutine (协程) 默认占用内存远比 Java 、C 的线程少。 goroutine: 2KB 线程: 8MB    线程/goroutine 切换(调度)开销方面
 线程/goroutine 切换开销方面，goroutine 远比线程小 线程: 涉及模式切换(从用户态切换到内核态)、16个寄存器、PC、SP…等寄存器的刷新等。 goroutine: 只有三个寄存器的值修改 - PC/SP/DX    goroutine和线程区别 从调度上看，goroutine的调度开销远远小于线程调度开销。
OS的线程由OS内核调度，每隔几毫秒，一个硬件时钟中断发到CPU，CPU调用一个调度器内核函数。这个函数暂停当前正在运行的线程，把他的寄存器信息保存到内存中，查看线程列表并决定接下来运行哪一个线程，再从内存中恢复线程的注册表信息，最后继续执行选中的线程。这种线程切换需要一个完整的上下文切换：即保存一个线程的状态到内存，再恢复另外一个线程的状态，最后更新调度器的数据结构。某种意义上，这种操作还是很慢的。
Go运行的时候包涵一个自己的调度器，这个调度器使用一个称为一个M:N调度技术，m个goroutine到n个os线程（可以用GOMAXPROCS来控制n的数量），Go的调度器不是由硬件时钟来定期触发的，而是由特定的go语言结构来触发的，他不需要切换到内核语境，所以调度一个goroutine比调度一个线程的成本低很多。
从栈空间上，goroutine的栈空间更加动态灵活。
每个OS的线程都有一个固定大小的栈内存，通常是2MB，栈内存用于保存在其他函数调用期间哪些正在执行或者临时暂停的函数的局部变量。这个固定的栈大小，如果对于goroutine来说，可能是一种巨大的浪费。作为对比goroutine在生命周期开始只有一个很小的栈，典型情况是2KB, 在go程序中，一次创建十万左右的goroutine也不罕见（2KB*100,000=200MB）。而且goroutine的栈不是固定大小，它可以按需增大和缩小，最大限制可以到1GB。
goroutine没有一个特定的标识。
在大部分支持多线程的操作系统和编程语言中，线程有一个独特的标识，通常是一个整数或者指针，这个特性可以让我们构建一个线程的局部存储，本质是一个全局的map，以线程的标识作为键，这样每个线程可以独立使用这个map存储和获取值，不受其他线程干扰。
goroutine中没有可供程序员访问的标识，原因是一种纯函数的理念，不希望滥用线程局部存储导致一个不健康的超距作用，即函数的行为不仅取决于它的参数，还取决于运行它的线程标识。</description>
    </item>
    
    <item>
      <title>Python中的进程线程协程</title>
      <link>/blog/2019/05/25/python%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sat, 25 May 2019 23:25:56 +0800</pubDate>
      
      <guid>/blog/2019/05/25/python%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>进程  可以充分利用多核，进程间通信会耗费额外的开销，达不到多线程应有的效率  线程  由于GIL的存在，无法利用多核 适合I/O密集型（IO阻塞期间CPU转去执行其他线程） 不适合CPU密集型/计算密集型；对于计算密集型任务，开启多线程几乎没有意义，甚至可能比顺序执行用时更长 （顺序执行时，cpu集中完成这个线程的任务，再转去下一个，没有切换，也就没有切换的消耗；开多线程又不是并发，白白增加了切换消耗） 进程每次释放GIL锁，所属的线程进行锁竞争、切换线程，会消耗资源 线程切换是由操作系统的调度器进行控制的 抢占式调度顺序具有不确定性，需要注意处理数据同步  协程  是一种用户级的轻量级的线程，拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器和栈存放在指定地方，在切换回来的时候，恢复先前的上下文和栈
  用户需要自己编写调度逻辑，控制任务的切换，那么自然可以控制任务的执行顺序 实现：yield(原生)/gevent/greenlet 比线程消耗更少的资源 对cpu来说，协程就是单线程，cpu不用考虑上下文调度和切换的问题，省去了cpu调度的开销，所有协程在一定程度上要优于线程 协程相当于在单个进程里启动里一个单线程，同时又可以实现多线程的效果 协程本质上是一个线程里面的细分，操作系统层面根本不知道这种区分，只当其是一个线程，程序员自己在应用层面通过yield进行协成间的切换  GIL GIL，即Global Interpreter Lock全局解释器锁，保证任何时刻仅有一个线程在执行。常见例子有CPython（JPython不使用GIL）与Ruby MRI。 不是所有的Python解释器都有GIL。
为什么要有GIL这个东西，不能去掉呢？这是为了实现GC，避免Java里Full GC(stop the world)引入的。更多内容参考 python 线程，GIL 和 ctypes
每个进程一把锁🔒，进程里的线程，只能有一个线程可以获得这把锁，进行工作，其他线程必须等待
在Python语言的主流实现CPython中，GIL 是一个货真价实的全局线程锁，在解释器解释执行任何Python代码时，都需要先获得这把锁才行， 在遇到I/O操作时会释放这把锁。如果是纯计算的程序，没有I/O操作，解释器会每隔100次操作就释放这把锁，让别的线程有机会执行（这个次数可以通过 sys.setcheckinterval 来调整）
同一进程下的多线程共享数据，共享意味着竞争，竞争带来无序，为了数据安全所以需要加锁进行数据保护，GIL本质是一把互斥锁，使并发变为串行， 保证同一时间只有一条线程访问解释器级别的数据，这样就保证了解释器级别的数据安全，同时也带来了一些问题，同一进程只有一条线程执行任务， 无法利用多核优势，解决方案可以根据任务的类型来处理，如果是I/O密集型，则需要开多线程提高效率，如果是计算密集型则需要多进程。
遇到阻塞，普通单线程的做法是就地等待，多线程的做法是转去执行其他线程&amp;ndash;这就是开多线程效率提高的原因。 但如果这种阻塞和放开是我们人为可以预料到的，那么我们可以在阻塞的地方yield返回到另一个可以执行的点，这样也实现了CPU的不浪费，同时还少了线程的切换，效率更高
python锁  python线程
  同步锁（互斥锁）-解决数据安全问题-threading.Lock 递归锁-解决线程死锁-threading.R_Lock Semaphore信号量-threading.Semaphere Event同步事件对象-threading.Event-让两个线程保持同步而不是独立的运行：你给我发个信号，我接到了做一个操作，再给你发一个信号，你接到了一个操作，发下一个信号…… Python中的多线程通信-queue线程队列  </description>
    </item>
    
    <item>
      <title>破解Navicat Premium</title>
      <link>/blog/2019/05/22/%E7%A0%B4%E8%A7%A3navicat-premium/</link>
      <pubDate>Wed, 22 May 2019 21:22:49 +0800</pubDate>
      
      <guid>/blog/2019/05/22/%E7%A0%B4%E8%A7%A3navicat-premium/</guid>
      <description>方法来自Navicat Keygen,已经fork
  Navicat Premium For Mac 12.1.21 简体中文版 已通过测试
 ✓ navicat121_premium_cs.dmg ✘ navicat121_premium_en.dmg    仅对 Navicat Premium 版本 &amp;lt; 12.0.24 的说明：
如果你的Navicat版本小于12.0.24，那么navicat-patcher将会终止并且不会修改目标文件。
你必须使用openssl生成RegPrivateKey.pem和rpk文件：
 $ openssl genrsa -out RegPrivateKey.pem 2048 $ openssl rsa -in RegPrivateKey.pem -pubout -out rpk  接着用刚生成的rpk文件替换
 /Applications/Navicat Premium.app/Contents/Resources/rpk    生成一份自签名的代码证书，并总是信任该证书；创建证书颁发机构时，名称和电子邮件地址随便写
  下载Navicat Premium中文版：https://www.navicat.com.cn/download/navicat-premium ，破解时，选择Simplified Chinese语言
  关掉自动升级吧，省的再次破解
  参考123
  https://www.zhb127.com/archives/macos-navicat-keygen.html &amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>并发中的各种锁的概念</title>
      <link>/blog/2019/05/18/%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%94%81%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sat, 18 May 2019 23:16:13 +0800</pubDate>
      
      <guid>/blog/2019/05/18/%E5%B9%B6%E5%8F%91%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%94%81%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>并发vs并行  并行是指两个或者多个事件在同一时刻发生 并发是指两个或多事件在同一时间段内发生  原子锁 原子锁是指原子操作，原子操作是不会被中断的，常用的原子操作：
InterLockedAdd InterLockedExchange InterLockedCompareExchange InterLockedIncrement InterLockedDecrement InterLockedAnd InterLockedOr  自旋锁：spinlock 非阻塞锁，也就是说，如果某线程需要获取自旋锁，但该锁已经被其他线程占用时，该线程不会被挂起，而是在不断的消耗CPU的时间，不停的试图获取自旋锁； 自选锁是一种互斥锁的实现方式而已，相比一般的互斥锁会在等待期间放弃cpu，自旋锁（spinlock）则是不断循环并测试锁的状态，这样就一直占着cpu; 用在以下情况：锁持有的时间短，而且线程并不希望在重新调度上花太多的成本。
互斥量/互斥锁：mutex 是阻塞锁，当某线程无法获取互斥量时，该线程会被直接挂起，该线程不再消耗CPU时间，当其他线程释放互斥量后，操作系统会激活那个被挂起的线程，让其投入运行。 互斥量的加锁和解锁必须在同一线程内完成，避免死锁。只有一个线程可以使用共享资源。mutex可以说是semaphore在仅取值0/1时的特例
信号量：semaphore 信号允许多个线程同时使用共享资源，但是需要限制在同一时刻访问此资源的最大线程数目；信号量包含互斥量
临界区：critical section 访问共享资源的一段代码；同一时刻，只能有一个线程进入临界区，实现共享资源的访问
资源共享：跨进程vs跨线程 — 临界区同步速度很快，但却只能用来同步本进程内的线程，而不可用来同步多个进程中的线程。
 使用互斥锁不仅仅能够在同一应用程序不同线程中实现资源的安全共享，而且可以在不同应用程序的线程之间实现对资源的安全共享 使用信号量和事件机制也可以实现跨进程的线程通信  进程vs线程  进程的内存空间是天然独立的，线程的内存空间是天然共享的。正因为如此，进程通信/线程同步才是系统编程的很大一块内容 进程的执行时间：CPU先加载上下文(程序的执行环境：比如内存存储，比如读写文件就会涉及硬盘I/O，网络通讯就会涉及网络I/O，玩游戏就会涉及显卡资源等)-&amp;gt;CPU执行代码片段-&amp;gt;CPU保存上下文， 以便还没有执行结束程序获得CPU时间片后继续执行。 线程的执行时间：线程由于共享进程资源(各种I/O，内存资源等)，就少了这部分的时间消耗，当然线程之间切换也会消耗少许时间，但相比进程切换消耗的时间，就小很多了。 进程是cpu资源分配的最小单位，线程是cpu调度的最小单位 可以理解为：进程是一个资源的容器，为进程里的所有线程提供共享资源 进程有自己独立的地址空间，而线程没有，线程必须依赖于进程而存在 进程可以没有线程，但是没有线程的进程就无法获取CPU时间片，所以至少有一个主线程 线程他自身也有栈，寄存器等。这里可以从Java的内存模型去看，线程栈中拥有外部变量的拷贝，线程对这个拷贝进行处理后，再把这个修改后的拷贝刷新回主内存。 进程是资源竞争的基本单位，比如竞争CPU的调度，以及申请内存（物理地址空间） 进程之间相互独立安全性高，如果两个进程之间需要进行（事件通知，数据传输，资源共享，进程控制）那么就需要通过进程间通信（管道，消息队列，共享内存，信号量等）的方式来达成 进程有自己的内存，通过分页将虚拟地址空间映射到物理地址空间来存储数据 线程共享进程的虚拟地址空间（共享段、数据段）、用户ID和组ID、文件描述符表、当前工作目录，但是线程也有自己的一部分数据，例如一组寄存器（用于线程切换上下文）、用户栈（保存私有数据）、线程优先级等 参考http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html 及其讨论   以下内容来自知乎：
 作者：胖君 链接：https://www.zhihu.com/question/39850927/answer/242109380 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。   核心矛盾是“竞态条件”，即多个线程同时读写某个字段。 竞态条件下多线程争抢的是“竞态资源”。 涉及读写竟态资源的代码片段叫“临界区”。 保证竟态资源安全的最朴素的一个思路就是让临界区代码“互斥”，即同一时刻最多只能有一个线程进入临界区。 最朴素的互斥手段：在进入临界区之前，用if检查一个bool值，条件不满足就“忙等”。这叫“锁变量”。 但锁变量不是线程安全的。因为“检查-占锁”这个动作不具备“原子性”。 “TSL指令”就是原子性地完成“检查-占锁”的动作。 就算不用TSL指令，也可以设计出线程安全的代码，有一种既巧妙又简洁的结构叫“自旋锁”。当然还有其他更复杂的锁比如“Peterson锁”。 但自旋锁的缺点是条件不满足时会“忙等待”，需要后台调度器重新分配时间片，效率低。 解决忙等待问题的是：“sleep”和“wakeup”两个原语。sleep阻塞当前线程的同时会让出它占用的锁。wakeup可以唤醒在目标锁上睡眠的线程。 使用sleep和wakeup原语，保证同一时刻只有一个线程进入临界区代码片段的锁叫“互斥量”。 把互斥锁推广到&amp;quot;N&amp;quot;的空间，同时允许有N个线程进入临界区的锁叫“信号量”。 互斥量和信号量的实现都依赖TSL指令保证“检查-占锁”动作的原子性。 把互斥量交给程序员使用太危险，有些编程语言实现了“管程”的特性，从编译器的层面保证了临界区的互斥，比如Java的synchronized关键字。 并没有“同步锁”这个名词，Java的synchronized正确的叫法应该是“互斥锁”，“独占锁”或者“内置锁”。但有的人“顾名思义”叫它同步锁。  几个点稍微展开一下，首先，不是所有变量都可以是竞态资源。以Java为例，表示对象状态的成员字段可以构成竞态资源。 方法内部的局部变量就不是竞态资源，因为局部变量的生命周期仅局限于方法栈，不能横跨多个线程。</description>
    </item>
    
    <item>
      <title>Golang文件锁</title>
      <link>/blog/2019/05/18/golang%E6%96%87%E4%BB%B6%E9%94%81/</link>
      <pubDate>Sat, 18 May 2019 22:54:58 +0800</pubDate>
      
      <guid>/blog/2019/05/18/golang%E6%96%87%E4%BB%B6%E9%94%81/</guid>
      <description>多个goroutine同时操作一同一个文件时，很容易出现数据混乱，因此有必要对文件进行加锁 多进程写
  协程：用户控制切换 goroutine：用户控制切换-&amp;gt;语言控制 进程/线程：内核OS控制切换 flock是操作系统级别的锁 使用fopen以&amp;quot;a&amp;quot;追加模式打开时，多个进程写同一log文件不会发送覆盖写的问题，每次都保证在文件末尾写。但是不保证写入的顺序
 并发与多核利用并不是相同的概念，高并发不一定利用了多核，
python协程就是一个典型，协程使用一种轻线程机制，避开了传统多线程的切换开销，实现惊人的并发管理。 但协程本身是运行在单线程里的，协程并不能直接利用多核，仍然受GIL影响。 因为python GIL的存在，python多线程是无法利用多核的。 多进程模式，python提供了multiprocessing模块， 可以用共享内存模式，这个模块为利用多核的应用提供了便利。</description>
    </item>
    
    <item>
      <title>Zsh启动优化</title>
      <link>/blog/2019/05/14/zsh%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 14 May 2019 21:41:40 +0800</pubDate>
      
      <guid>/blog/2019/05/14/zsh%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/</guid>
      <description>主要优化方法   偶尔执行一次的sh脚本，不要每次都执行，需要的时候再执行，举例：
 # 下面的配置保证每次打开终端的时候，都可以执行python虚拟环境的workon/mkvirtualenv/rmvirtualenv等命令 # source /usr/local/bin/virtualenvwrapper.sh # source /Library/Frameworks/Python.framework/Versions/3.6/bin/virtualenvwrapper.sh # 修改为函数的形式，需要执行python虚拟环境命令的时候再执行这个函数 start_virtualenvwrapper() { source /Library/Frameworks/Python.framework/Versions/3.6/bin/virtualenvwrapper.sh }    懒加载。有些命令需要的时候再加载，举例：k8s命令kubectl
 # lazy load begin if [ $commands[kubectl] ]; then # Placeholder &#39;kubectl&#39; shell function: # Will only be executed on the first call to &#39;kubectl&#39; kubectl() { # Remove this function, subsequent calls will execute &#39;kubectl&#39; directly unfunction &amp;quot;$0&amp;quot; # Load auto-completion source &amp;lt;(kubectl completion zsh) # Execute &#39;kubectl&#39; binary $0 &amp;quot;$@&amp;quot; } fi # lazy load end    把类似$(brew &amp;ndash;prefix dvm)的命令直接修改为其执行后的路径值，因为这条命令执行比较耗时</description>
    </item>
    
    <item>
      <title>Curl常用操作</title>
      <link>/blog/2019/05/13/curl%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 13 May 2019 11:02:34 +0800</pubDate>
      
      <guid>/blog/2019/05/13/curl%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>curl &amp;ndash;help/&amp;ndash;manual查看完整信息
   使用curl post上传文件，multipart/form-data
 如果不设置filename，默认的filename值就是file的名字，本例的&amp;quot;go.sum&amp;rdquo;
 curl -x 127.0.0.1:6060 -F &amp;ldquo;appkey=xxxx&amp;rdquo; -F &amp;ldquo;projectCode=platformtool&amp;rdquo; -F &amp;ldquo;appsecret=xxxx&amp;rdquo; -F &amp;ldquo;file=@go.sum;filename=test&amp;rdquo; http://xxxx.tongdun.me/v1/resource/upload
 报文内容： POST /v1/resource/upload HTTP/1.1 Host: xxxx.tongdun.me User-Agent: curl/7.54.0 Accept: */* Content-Length: 15262 Expect: 100-continue Content-Type: multipart/form-data; boundary=------------------------7bba7e03d249b584 Connection: close --------------------------7bba7e03d249b584 Content-Disposition: form-data; name=&amp;quot;appkey&amp;quot; xxxx --------------------------7bba7e03d249b584 Content-Disposition: form-data; name=&amp;quot;projectCode&amp;quot; platformtool --------------------------7bba7e03d249b584 Content-Disposition: form-data; name=&amp;quot;appsecret&amp;quot; xxxx --------------------------7bba7e03d249b584 Content-Disposition: form-data; name=&amp;quot;file&amp;quot;; filename=&amp;quot;test&amp;quot; Content-Type: application/octet-stream cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw= github.com/BurntSushi/toml v0.3.1 h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ= github.</description>
    </item>
    
    <item>
      <title>Mac常用操作</title>
      <link>/blog/2019/05/13/mac%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 13 May 2019 10:43:39 +0800</pubDate>
      
      <guid>/blog/2019/05/13/mac%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>在Finder中显示/隐藏隐藏文件
 defaults write com.apple.Finder AppleShowAllFiles YES/NO killall Finder    打开多个实例
 open -n /Applications/xxx.app    tcp路由查看
 netstat -r netstat -ant 1    查看端口/进程
 lsof -i:port lsof -p pid    数学公式软件
 latex    接力(handoff)
 在一个设备上复制的内容，可以在另一个设备上粘贴； 在一个设备上浏览的内容，可以在另一个设备上接着浏览
  两个设备属于同一个AppleID/开启蓝牙和接力功能/处于同一个网络    截屏
 cmd+shift+3：对整个屏幕进行截图 cmd+shift+4：对自行选择的区域进行截图 cmd+shift+4+space（空格键）对选定的某个应用程序界面窗口进行截图 Xnip/Snip滚动截图，实现对一个网页的长截图    分屏功能
 按住任一打开的窗口左上角的绿色的全屏按钮    批量更改文件名称</description>
    </item>
    
    <item>
      <title>个人所得税2019</title>
      <link>/life/2019/05/11/%E4%B8%AA%E4%BA%BA%E6%89%80%E5%BE%97%E7%A8%8E2019/</link>
      <pubDate>Sat, 11 May 2019 00:36:45 +0800</pubDate>
      
      <guid>/life/2019/05/11/%E4%B8%AA%E4%BA%BA%E6%89%80%E5%BE%97%E7%A8%8E2019/</guid>
      <description>计算方法  个税精灵 个人所得税  关注两个基数  在岗职工的社会保险缴费基数，新的缴费基数通常在每年的7月调整启用,同时对1-6月预收的社会保险费进行差额补退。
   这两个值直接影响五险一金，关乎个人收入，并且很多公司通过采用较低标准减负。
  1. 社保基数，是根据最低标准还是最高标准？还是中间某个值 2. 住房公积金基数，是否是按照工资总额？  五险一金缴纳比例 社保缴费基数“上下限”，根据上一年浙江省在岗职工年平均工资计算，比如：
+ 月平均工资（保留小数点后两位）为61099元÷12月=5091.58元/月 + 保底工资基数（保留小数点后两位）为5091.58×60%=3054.95 + 封顶工资基数（保留小数点后两位）为5091.58×300%=15274.74    目前市本级（含萧山、余杭、富阳）的企业单位职工五险的缴费费率
   - 个人 企业     养老保险 8% 14%   医疗保险 2% 10.5%   失业保险 0.5% 0.5%   工伤保险 0 0.3%   生育保险 0 1.2%      目前市本级（含萧山、余杭、富阳）有雇工的个体工商户职工五险的缴费费率</description>
    </item>
    
    <item>
      <title>Markdown语法及常见用法举例</title>
      <link>/blog/2019/05/10/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Fri, 10 May 2019 21:18:52 +0800</pubDate>
      
      <guid>/blog/2019/05/10/markdown%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E4%B8%BE%E4%BE%8B/</guid>
      <description>缩进   标题（Headers）
 Markdown 标题支持两种形式：
 1.1 用1~6个#标记
&amp;gt; 在标题开头加上1~6个#，依次代表一级标题、二级标题....六级标题 # 一级标题 ## 二级标题 ### 三级标题 ##### 四级标题 ###### 五级标题 ###### 六级标题  一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 1.2 用=和-标记
 在标题底下 加上任意个=代表一级标题，-代表二级标题
  一级标题 ====== 二级标题 ----------  一级标题 二级标题
    列表（Lists）
 Markdown 支持有序列表和无序列表。列表不光可以单独使用，也可以使用其他的 Markdown 语法，包括标题、引用、代码区块等
 2.1 无序列表（Unordered Lists）
 无序列表使用-、+和*作为列表标记
  - Red - Green - Blue * Red * Green * Blue + Red + Green + Blue   Red Green Blue   Red Green Blue   Red Green Blue  2.</description>
    </item>
    
    <item>
      <title>关于shell的各种括号的用法</title>
      <link>/blog/2019/05/10/%E5%85%B3%E4%BA%8Eshell%E7%9A%84%E5%90%84%E7%A7%8D%E6%8B%AC%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 10 May 2019 20:52:10 +0800</pubDate>
      
      <guid>/blog/2019/05/10/%E5%85%B3%E4%BA%8Eshell%E7%9A%84%E5%90%84%E7%A7%8D%E6%8B%AC%E5%8F%B7%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>大部分情况可以通用，建议使用双中括号[[]]，不同的shell表现也不尽相同
 正确的用法 1. 逻辑与：[ &amp;quot;2&amp;quot; = &amp;quot;2&amp;quot; -a &amp;quot;3&amp;quot; = &#39;3&#39; ]、[[ &amp;quot;2&amp;quot; = &amp;quot;2&amp;quot; &amp;amp;&amp;amp; &amp;quot;3&amp;quot; = &#39;3&#39; ]]、[ &amp;quot;2&amp;quot; = &amp;quot;2&amp;quot; ] &amp;amp;&amp;amp; [ &amp;quot;3&amp;quot; = &#39;3&#39; ] 2. 逻辑或：[ &amp;quot;2&amp;quot; = &amp;quot;2&amp;quot; -o &amp;quot;3&amp;quot; = &#39;3&#39; ]、[[ &amp;quot;2&amp;quot; = &amp;quot;2&amp;quot; || &amp;quot;3&amp;quot; = &#39;3&#39; ]]、[ &amp;quot;2&amp;quot; = &amp;quot;2&amp;quot; ] || [ &amp;quot;3&amp;quot; = &#39;3&#39; ] 3. []可以替换为test :if [ -e zshrctest ];then;echo &amp;quot;yes&amp;quot;;fi 等价于 if test -e zshrctest;then;echo &amp;quot;yes&amp;quot;;fi 3.</description>
    </item>
    
    <item>
      <title>潜意识学习</title>
      <link>/life/2019/05/03/%E6%BD%9C%E6%84%8F%E8%AF%86%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/life/2019/05/03/%E6%BD%9C%E6%84%8F%E8%AF%86%E5%AD%A6%E4%B9%A0/</guid>
      <description>愿你在所得少于付出时，不会终日愤愤；愿你在所得超过付出时，不必终日惶恐。
—— 东野圭吾
 这个视频系列可以精读：https://www.youtube.com/channel/UCaKZDEMDdQc8t6GzFj1_TDw</description>
    </item>
    
  </channel>
</rss>