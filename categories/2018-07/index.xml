<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2018-07 on 道法自然</title>
    <link>/categories/2018-07/</link>
    <description>Recent content in 2018-07 on 道法自然</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/2018-07/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tcp Server Design</title>
      <link>/blog/2018/07-28-tcp-server-design/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07-28-tcp-server-design/</guid>
      <description> 绝大多数的TCP服务都是支持并发的。当一个连接请求到达时，服务端接收这个连接，然后创建一个新的线程(或进程)来处理这个连接。
listen状态 在本地启动Go的服务，使用netstat查看：
netstat -an -f inet  可以看到listen状态的请求连接。其中Local Address的*表示请求会被本地的任意地址处理(如果有多重地址的话)。Foreign Address中*.*表示客户端的ip和port都是未知的。
Active Internet connections (including servers) Proto Recv-Q Send-Q Local Address Foreign Address (state) tcp46 0 0 *.3900 *.* LISTEN  当新的请求到达，并被接收时，服务器内核中会创建一个ESTABLISHED状态的连接。而listen继续去接收新的连接。
Proto Recv-Q Send-Q Local Address Foreign Address (state) tcp4 0 0 127.0.0.1.3900 127.0.0.1.51133 ESTABLISHED tcp46 0 0 *.3900 *.* LISTEN  request queue 当listening状态的应用正在忙于处理新的连接，同时有其他的请求进来时，服务器是如何处理的呢？引入另一个概念：请求队列。
 每一个监听状态的终端都有一个固定长度的队列，用来存放TCP三次握手完成，但还没有被应用接收的连接。client会认为该连接已经创建成功，所以它此时发送的数据也会被缓存起来。如果queue中的连接长时间不被应用读取，便会导致client超时。 当队列满了后，TCP会直接忽略进来的SYN，而非回复RST报文头。这样做便是要client稍后重新发送SYN。因为服务器比较繁忙的状况，可能马上就会恢复。 如果TCP三次握手完成，连接也就被创建成功了。如果此时服务端不想为该ip提供服务，服务端要么发送FIN关闭这个连接，或者发送RST中断这个连接。整个过程中，TCP没有权限去限制client端。  </description>
    </item>
    
    <item>
      <title>重试</title>
      <link>/blog/2018/07-24-%E9%87%8D%E8%AF%95/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07-24-%E9%87%8D%E8%AF%95/</guid>
      <description>为了克服网络问题，重试是我们常用的手段之一。但必须记住：重试的姿势非常重要。照应一句古话：“差若毫厘，谬以千里”。
正确的姿势是便是：
 如果请求没有成功，以指数型延迟重试
 指数退避  Exponential backoff is an algorithm that uses feedback to multiplicatively decrease the rate of some process, in order to gradually find an acceptable rate
 通俗的的讲，网络上的节点在发送数据冲突之后，不应立即尝试重发，而应该等待一段时间再发送，等待时间是指数增长，从而避免频繁的触发冲突。在计算机网络中，二进制指数退避算法常常作为避免网络堵塞的一部分，用于同一数据块的重发策略。
发生n次冲突之后，等待时间在0~2^n-1个间隙时间(slot time)之间随机选择。比如第一次冲突之后，每个发送方会等待0或者1个间隙；第二次冲突之后，或等待时间会在0到3个间隙任意选择，依次类推，随着冲突次数的增加，发送方等待的时间可能成倍增加。
冲突达到一定次数，指数运算会停止，表示等待时间不会无限制增加下去。比如设置上限n=10,则最长等待时间为1023个时间间隙。同样，发送不可能永远的尝试下去，所以流程一般会在16次重试之后终止。
具体的退避算法：
1. 确定基本退避时间：争用期 2. 确定等待时间上限(max)。假设重传次数超过10次之后,k就不再增大。计算公式：k表示计算冲突等待时间的指数， k=min（重传次数, max） 3. 当重传达到16次仍不成功，则数据需要丢弃，并向高层报告。  退避算法的应用场景：
1. 三方支付中交易结果的推送通知。 2. 轮询，不间断的固定时间间隔的请求接口。  重试的问题 以下面的代码说明一下：
retryTimes := 1 for err != nil &amp;amp;&amp;amp; retryTimes &amp;lt;= 3 { //请求失败后，重新尝试 body, err = curl.</description>
    </item>
    
    <item>
      <title>siege压测</title>
      <link>/blog/2018/07-19-siege%E5%8E%8B%E6%B5%8B/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07-19-siege%E5%8E%8B%E6%B5%8B/</guid>
      <description> 关于压测，首先要了解TPS和并发用户数之间的关系：
 TPS就是每秒事务数，但是事务是基于虚拟用户数的。假如1个虚拟用户在1秒内完成1笔事务，那么TPS明显就是1；如果某笔业务响应时间是1ms，那么1个用户在1秒内能完成1000笔事务，TPS就是1000了；如果某笔业务响应时间是1s,那么1个用户在1秒内只能完 成1笔事务，要想达到1000TPS，至少需要1000个用户；因此可以说1个用户可以产生1000TPS，1000个用户也可以产生1000TPS，无非是看响应时间快慢。
 针对上面的描述，引申出了命令的三个属性：
-c : This option allows you to set the concurrent number of users -r : This option tells each siege user how times it should run. -t : This option specify the number of times each user should run  对于linux的命令，其实man查看就足够了。
example 提交json格式的数据请求到服务器。POST后跟数据内容，不需要使用引号处理。
# linux下执行命令 siege -f ./url.txt -H &amp;quot;Content-Type: application/json&amp;quot; # url.txt中的内容 HOST=neojos.com $(HOST)/v1/buy POST {&amp;quot;bid&amp;quot;: 0, &amp;quot;type&amp;quot;: 13 }  </description>
    </item>
    
    <item>
      <title>Kafka的offset初窥(1)</title>
      <link>/blog/2018/07-14-kafka%E7%9A%84offset%E5%88%9D%E7%AA%A51/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07-14-kafka%E7%9A%84offset%E5%88%9D%E7%AA%A51/</guid>
      <description>kafka适用的场景很多，但用它来异步通知却是让我略感头痛！
引言 对于kafka的offset问题，先从这篇文章说起：How to disable auto commit? 它阐述了一个重要的信息：
 To disable auto-commit, simply delay your MarkOffset calls. A commit will only occur when the offsets have been changed. If you are not ready to commit, then don&amp;rsquo;t mark the offset as ready.
 对于其中的另一个建议：即由我们主动调用consumer.CommitOffsets()。当然它最后补了一刀：
 Auto commit gives us some trouble in this case, as we might commit offsets which we have not yet written to the database. Having the ability to disable it by simply setting config.</description>
    </item>
    
    <item>
      <title>Linux查看监听的端口进程</title>
      <link>/blog/2018/07-10-linux%E6%9F%A5%E7%9C%8B%E7%9B%91%E5%90%AC%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07-10-linux%E6%9F%A5%E7%9C%8B%E7%9B%91%E5%90%AC%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BF%9B%E7%A8%8B/</guid>
      <description>Netstat 是一款命令行工具，可用于列出系统上所有的网络套接字连接情况，包括 tcp, udp 以及 unix 套接字。另外它还能列出处于监听状态（即等待接入请求）的套接字。经常使用 netstat 用于查看网络连接信息和系统开启的端口号。
 还有一个完美替代它的命令ss，全称是socket statistics。ss的优点就在于“天下武功唯快不破”。
引言 已知服务监听的端口，想查找当前服务的PID。我们可以拆解成2个子问题： 1. 如何查看该端口是否在被服务监听 2. 如何查看该端口的PID
ps 用于查看服务器上的进程信息.最最常用的就是:
ps -ef  netstat 显示的状态列：Proto，Recv-Q，Send-Q，Local Address，Foreign Address，State。其中Recv-Q和Send-Q分别代表接收队列和发送队列。这些数字一般都是0，如果不是，则表示软件包正在队列中堆积。
Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 enlightened:domain *:* LISTEN  比较有用的选项是：
 -n：Show network addresses as numbers (normally netstat interprets addresses and attempts to display them symbolically). This option may be used with any of the display formats.</description>
    </item>
    
    <item>
      <title>mitmproxy使用</title>
      <link>/blog/2018/07-06-mitmproxy%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07-06-mitmproxy%E4%BD%BF%E7%94%A8/</guid>
      <description>介绍一款非常好用的抓包工具，官网地址：https://www.mitmproxy.org。实际上，在调试苹果IAP支付时，始终没有抓成功过，反而因为设置了代理，导致苹果沙盒用户无法成功支付。它名字的全拼是Man-in-the-middle-proxy，代表中间人攻击。
常用的快捷键  在列表界面，按回车进入详情界面 在详情界面，按q返回列表界面 在详情界面，按tab键在Request,Response,Detail三个tab之间切换。按j，k可以滚动查看详情. 在列表界面，按G跳到最新一个请求 在列表界面，按g跳到第一个请求 在列表界面，按d删除当前选中的请求，按D恢复刚才删除的请求 在列表界面，按z清空请求列表  常用的过滤表达式 列表界面,按f进入过滤模式。详细的过滤表达式，可以查看：Filter expressions。
 ~h regex Header ~u regex URL ~m regex Method  原理  Subject Alternative Name：is an extension to X.509 that allows various values to be associated with a security certificate using a subjectAltName field. These values are called Subject Alternative Names (SANs). Names include Server Name Indication： is an extension to the TLS computer networking protocol by which a client indicates which hostname it is attempting to connect to at the start of the handshaking process.</description>
    </item>
    
    <item>
      <title>MySQL事务</title>
      <link>/blog/2018/07-01-mysql%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/07-01-mysql%E4%BA%8B%E5%8A%A1/</guid>
      <description>关于MySQL事务的诡异问题，至今没有调查出原因。但却也是一个契机，带我重新回忆之前的遇到的事务问题。
诡异的问题 系统中存在A和B两个表。B表中有两个关键字段：一个是唯一索引transaction_id，还有一个是标识处理状态的status。当status=0表示记录未被处理，status=1表示记录处理过了，不需要再处理了。
如果B中记录未处理，则在A表中插入一条权益记录，同时更新status=1，后续就不能再给用户加权益了。
代码做了如下处理：
func sessPart() { //开启事务 session := engine.NewSession() sess.Begin() defer session.Close() defer sess.Rollback() //插入价钱100分的权益交付记录 exchange := models.Exchange{Money: 100, Uid: 1} _, err := sess.Insert(exchange) if err != nil { sess.Rollback() return } //更新status为1 //并且使用乐观锁，防止因没有匹配到数据，直接返回成功 testModel := Test{ Status: 1, } affectRows, err := sess.Where(&amp;quot;transaction_id = ? AND status = 0&amp;quot;, 1). Cols(&amp;quot;status&amp;quot;).Update(&amp;amp;testModel) if err != nil || affectRows == 0 { sess.Rollback() return } sess.Commit() } //测试事务的并发情况 func BenchmarkLock(b *testing.</description>
    </item>
    
  </channel>
</rss>