<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019-10 on 持之以恒</title>
    <link>/categories/2019-10/</link>
    <description>Recent content in 2019-10 on 持之以恒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Oct 2019 23:33:43 +0800</lastBuildDate>
    
	<atom:link href="/categories/2019-10/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java高深知识点</title>
      <link>/blog/2019/10/29/java%E9%AB%98%E6%B7%B1%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Tue, 29 Oct 2019 23:33:43 +0800</pubDate>
      
      <guid>/blog/2019/10/29/java%E9%AB%98%E6%B7%B1%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>asm(assembly)字节码生成框架
Java agent ：java代理(探针)
Aop底层是通过①Java动态代理 ②cglib（Code Generation Library）动态代理 实现的
CGLib的底层实现是asm
ClassLoader
反射
unsafe
netty bytebuf
ASM字节码增强技术
Instrumentation</description>
    </item>
    
    <item>
      <title>P3c规则开发</title>
      <link>/blog/2019/10/29/p3c%E8%A7%84%E5%88%99%E5%BC%80%E5%8F%91/</link>
      <pubDate>Tue, 29 Oct 2019 23:14:44 +0800</pubDate>
      
      <guid>/blog/2019/10/29/p3c%E8%A7%84%E5%88%99%E5%BC%80%E5%8F%91/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Idea插件开发</title>
      <link>/blog/2019/10/29/idea%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Tue, 29 Oct 2019 23:13:58 +0800</pubDate>
      
      <guid>/blog/2019/10/29/idea%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description></description>
    </item>
    
    <item>
      <title>虚拟机栈</title>
      <link>/blog/2019/10/29/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</link>
      <pubDate>Tue, 29 Oct 2019 22:54:58 +0800</pubDate>
      
      <guid>/blog/2019/10/29/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</guid>
      <description>虚拟机栈(java stack)  百度图片搜索里的动图搜索功能不错，可以搜索一些动图，展示操作数栈的操作过程，比较形象。这点google差点意思
   虚拟机栈(jvm stacks)是线程独占的
  里面是多个栈帧(frame)或叫方法帧(class里的每个方法独占一个栈帧，所以也可以称之为方法帧)
  每个栈帧里包含：局部变量区/操作数栈/动态链接/方法的返回地址
  示例   文件SimpleExample.java
1 class SimpleExample { 2 public static void main(String[] args) { 3 int result = add(2,3); 4 System.out.println(result); 5 } 6 public static int add(int a, int b) { 7 return a+b; 8 } 9 }   编译源代码生产字节码文件SimpleExample.class
-g Generates all debugging information, including local variables. By default, only line number and source file information is generated.</description>
    </item>
    
    <item>
      <title>系统调用</title>
      <link>/blog/2019/10/03/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Thu, 03 Oct 2019 09:13:15 +0800</pubDate>
      
      <guid>/blog/2019/10/03/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>算法</title>
      <link>/blog/2019/10/03/%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 03 Oct 2019 07:59:15 +0800</pubDate>
      
      <guid>/blog/2019/10/03/%E7%AE%97%E6%B3%95/</guid>
      <description>idea如何实现各种括号语法检查 idea各类插件的工作原理 p3c的扫描原理 pmd规则自定义 findbugs插件规则原理 </description>
    </item>
    
    <item>
      <title>进程间通信</title>
      <link>/blog/2019/10/03/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Thu, 03 Oct 2019 07:56:26 +0800</pubDate>
      
      <guid>/blog/2019/10/03/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</guid>
      <description>https://www.zhihu.com/search?type=content&amp;amp;q=进程间通信%20python
进程间通信的各种方式效率对比</description>
    </item>
    
    <item>
      <title>数据结构</title>
      <link>/blog/2019/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Thu, 03 Oct 2019 07:56:15 +0800</pubDate>
      
      <guid>/blog/2019/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>使用场景 优点 缺点 限制 举例  红黑树 二叉树 链表 队列   数据结构和算法的可视化 可视化网站   Data Structure Visualizations
  可以下载jar包，本地启动(java -jar xx.jar)
  下载源码本地直接打开
    VisuAlgo
 起初就是老师方便教学用的
  支持自定义算法 支持在线测试(考试) 电子讲座模式：一步步讲解 示例模式：直接查看过程    algorithm-visualizer
 支持Java/C++/JavaScript    toneofsorting
  算法可视化 原文
  相关文章 数据结构与算法系列 目录
浅谈算法和数据结构: 九 平衡查找树之红黑树
浅谈算法和数据结构: 十 平衡查找树之B树
[数据结构图解（递归，二分，AVL，红黑树，伸展树，哈希表，字典树，B树，B+树）]
数据结构和算法（十一）：红黑树
图解Java常用数据结构(一)
https://github.com/jobbole
https://www.yanbinghu.com/2019/06/15/36031.html</description>
    </item>
    
    <item>
      <title>IO Model</title>
      <link>/blog/2019/10/02/io-model/</link>
      <pubDate>Wed, 02 Oct 2019 09:02:42 +0800</pubDate>
      
      <guid>/blog/2019/10/02/io-model/</guid>
      <description>这里使用udp举例，因为udp状态简单：要么收到数据，要么没有收到；tcp协议相对比较复杂
 五种I/O模型   阻塞I/O Blocking I/O
  非阻塞I/O Non blocking I/O
  多路复用 I/O multiplexing (select and poll)
  信号驱动 Signal driving I/O(SIGIO)
  异步I/O Asynchronous I/O
  两个阶段  第一阶段：wait for data 等待网络里的数据到达，到达后，数据被暂存在内核空间的内核缓冲区 第二阶段：copy data from kernel to user 把数据从内核空间的内核缓冲区拷贝到用户空间的应用进程缓冲区  两个缓冲区   内核缓冲区
  进程缓冲区
  同步与异步  描述的是用户线程与内核的交互方式
  同步指用户线程发起I/O请求后需要等待或者轮询内核I/O操作完成后才能继续执行 异步是指用户线程发起I/O请求后仍然继续执行，当内核I/O操作完成后会通知用户线程，或者调用用户线程注册的回调函数  阻塞与非阻塞  描述是用户线程调用内核I/O操作的方式，</description>
    </item>
    
    <item>
      <title>IT行业的各个定律</title>
      <link>/blog/2019/10/01/it%E8%A1%8C%E4%B8%9A%E7%9A%84%E5%90%84%E4%B8%AA%E5%AE%9A%E5%BE%8B/</link>
      <pubDate>Tue, 01 Oct 2019 17:49:40 +0800</pubDate>
      
      <guid>/blog/2019/10/01/it%E8%A1%8C%E4%B8%9A%E7%9A%84%E5%90%84%E4%B8%AA%E5%AE%9A%E5%BE%8B/</guid>
      <description>摩尔定律  英特尔创始人之一戈登.摩尔于1965年提出，它并不是一个原理，而是一个预测
 价格不变，集成电路上可容纳的元器件数目，约每隔18个月便会翻一倍，性能也将提升一倍
反摩尔定律  Google的前CEO埃里克.施密特提出
 如果一个IT公司现在和18个月前卖掉同样多的同样的产品，它的营业额就要下降一半。反摩尔定律逼着所有的硬件设备公司必须赶上摩尔定律规定的更新速度
贝尔定律  戈登·贝尔（GordonBell，1934-），DEC技术灵魂、小型机之父，最成功的小型机VAX的设计师
 如果保持计算机能力不变,微处理器的价格和体积每18个月减小一倍。
它与摩尔定律互相补充，意味着同等价位的处理器速度会越来越快，而同等速度的处理器则会越来越便宜。
吉尔德定律  吉尔德定律的提出者是被称为“数字时代三大思想家”之一的乔治·吉尔德
 在未来25年，主干网的带宽将每6个月增加一倍，其增长速度至少是摩尔定律所预测cpu性能增长速度的三倍。
麦特卡尔定律  定律的提出者为以太网的发明人鲍勃·麦特卡尔夫
 网络的价值和用户数量的平方成正比;网络价值以用户数量的平方的速度增长,N个联结创造出N*N的效益
核心思想：举例来说，电话是一个人打给另一个人，信息是从一个端口到另一个端口，得到的效益是1， 一个电视节目N个人同时收看，信息是从一个端口到N个端口， 得到的效益是N； 而在网上，每一个人都能够连接到N个人，N个人能看到N个人的信息，所以信息的传送效益是N的平方。上网的人数越多，产生的效益越多
按照摩尔定律和吉尔德定律，未来的计算机成本将会持续回落，而网络将呈指数级发展；随着网络用户数量迅速膨胀到数以亿计，网络的价值越发不可估量， 这又与麦特卡尔夫定律不谋而合。在网络经济时代，共享程度越高，拥有的用户群体越大，其价值越能得到最大程度的体现， 而闭关自守，不愿将信息和技术与他人共享是没有出路的。因此，如何充分领会麦特卡尔夫定律的实质，转变思想，从以往旧经济模式中摆脱出来， 进一步适应网络经济时代的新挑战，已经成为所有企业必须考虑的问题
安迪比尔定律  Andy gives,Bill takes away Andy指的是英特尔的前CEO Andy Grove，而Bill指就是Bill Gates
 计算机芯片(硬件)一旦更新升级，那么软件就会随之升级，然后吃掉硬件的所有优势
扬尼斯定律 程序员的开发效率每6年提高一倍。
效率6年提高一倍，那么平均每年提高16.6%，如果你自己没有达标，或者止步不前，那么你的价值其实是在下降16.6%。 那么同样对于一家公司，6年内员工数量保持不变，且在正常离职率前提下，如果营业额没有翻一番，那么公司的利润其实在下降
诺维格定理 当一个公司的市场占有率超过 50% 以后，就不要再指望在市场占有率上翻番了
基因决定论 一个公司进入成熟期以后，很难在新的领域获得成功
70-20-10 源于原苹果CEO斯库里，它比喻了信息科技市场中的竞争关系。当某个领域发展成熟之后，一般在容不下三个以上的主要竞争者。 行业中一定有一个老大，占据着过半的市场份额，拥有着市场绝对话语权，制定了游戏规则；老二占据着百分之二三十的市场，有时也会进步一些，但总体会一直收到老大的压制； 余下的份额由一群小的企业占据，围绕着老大的游戏规则做自己的小业务
二十世纪西方文化三大发现 墨菲定律  爱德华·墨菲（Edward A. Murphy）提出的，亦称墨菲法则、墨菲定理。
 原文为如果有两种或两种以上的方式去做某件事情，而其中一种选择方式将导致灾难，则必定有人会做出这种选择。
根本内容是：如果事情有变坏的可能，不管这种可能性有多小，它总会发生，并引起最大可能的损失。 这其中原因在于，因为机率小，相对的应急措施，防范措施容易存在不到位的情况，这在日常工作中是常见的。资源有限的情况，根据事情四象限，这类事情 一般都会放在不重要不紧急的象限内，但是它仍然是个需要处理的任务，必须解决，不然总会发生</description>
    </item>
    
  </channel>
</rss>