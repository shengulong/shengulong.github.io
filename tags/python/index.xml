<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 持之以恒</title>
    <link>/tags/python/</link>
    <description>Recent content in python on 持之以恒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Sep 2019 10:55:44 +0800</lastBuildDate>
    
	<atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python的上下文用法</title>
      <link>/blog/2019/09/12/python%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 12 Sep 2019 10:55:44 +0800</pubDate>
      
      <guid>/blog/2019/09/12/python%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E7%94%A8%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python的装饰器用法</title>
      <link>/blog/2019/09/12/python%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 12 Sep 2019 10:47:03 +0800</pubDate>
      
      <guid>/blog/2019/09/12/python%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
      <description>场景 日志 鉴权 </description>
    </item>
    
    <item>
      <title>Python的协程用法</title>
      <link>/blog/2019/09/12/python%E7%9A%84%E5%8D%8F%E7%A8%8B%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 12 Sep 2019 10:39:35 +0800</pubDate>
      
      <guid>/blog/2019/09/12/python%E7%9A%84%E5%8D%8F%E7%A8%8B%E7%94%A8%E6%B3%95/</guid>
      <description> 开个题
 </description>
    </item>
    
    <item>
      <title>Python的caller对callee模块内部参数的修改生效情况</title>
      <link>/blog/2019/07/24/python%E7%9A%84caller%E5%AF%B9callee%E6%A8%A1%E5%9D%97%E5%86%85%E9%83%A8%E5%8F%82%E6%95%B0%E7%9A%84%E4%BF%AE%E6%94%B9%E7%94%9F%E6%95%88%E6%83%85%E5%86%B5/</link>
      <pubDate>Wed, 24 Jul 2019 10:16:20 +0800</pubDate>
      
      <guid>/blog/2019/07/24/python%E7%9A%84caller%E5%AF%B9callee%E6%A8%A1%E5%9D%97%E5%86%85%E9%83%A8%E5%8F%82%E6%95%B0%E7%9A%84%E4%BF%AE%E6%94%B9%E7%94%9F%E6%95%88%E6%83%85%E5%86%B5/</guid>
      <description>被调用方callee代码 callee.py #!/usr/bin/env python # -*- coding: utf-8 -*- &amp;quot;&amp;quot;&amp;quot; @Author : xxx@xxx.net @Date : 2019-06-28 @Description : @File : callee.py &amp;quot;&amp;quot;&amp;quot; NAME = &#39;我是模块内部的初始值&#39; print(NAME) print(&#39;模块会在被引入时(import callee)执行一遍,引入本模块会显示此信息&#39;) def fun1(): print(&amp;quot;模块会在被引入时执行一遍，但是不会执行这个函数，除非被调用&amp;quot;) class ClassTemplate(object): # 此处的name变量除非被初始化时显示参数传入，否则使用的是模块内部的全局变量值 def __init__(self, name=NAME): # __name 是私有变量，只有类本身可以访问，子类也不可以访问 # _name 是受保护变量，类本身和子类可以访问，from module import *无法导入 # decorator装饰器/迭代器__iter__、__next__/yield生成器/ self.__name = name print(name) # 如果外面模块修改了这个变量，则显示修改后的变量值 print(NAME) def run(self): print(&amp;quot;my name is %s&amp;quot; % self.__name) @classmethod # 此处的变量value除非被初始化时显示参数传入，否则使用的是模块内部的全局变量值 def class_method(cls, value=NAME): print(value) # 如果外面模块修改了这个变量，则显示修改后的变量值 print(NAME) # cls.</description>
    </item>
    
    <item>
      <title>Python中的进程线程协程</title>
      <link>/blog/2019/05/25/python%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sat, 25 May 2019 23:25:56 +0800</pubDate>
      
      <guid>/blog/2019/05/25/python%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>进程  可以充分利用多核，进程间通信会耗费额外的开销，达不到多线程应有的效率  线程  由于GIL的存在，无法利用多核 适合I/O密集型（IO阻塞期间CPU转去执行其他线程） 不适合CPU密集型/计算密集型；对于计算密集型任务，开启多线程几乎没有意义，甚至可能比顺序执行用时更长 （顺序执行时，cpu集中完成这个线程的任务，再转去下一个，没有切换，也就没有切换的消耗；开多线程又不是并发，白白增加了切换消耗） 进程每次释放GIL锁，所属的线程进行锁竞争、切换线程，会消耗资源 线程切换是由操作系统的调度器进行控制的 抢占式调度顺序具有不确定性，需要注意处理数据同步  协程  是一种用户级的轻量级的线程，拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器和栈存放在指定地方，在切换回来的时候，恢复先前的上下文和栈
  用户需要自己编写调度逻辑，控制任务的切换，那么自然可以控制任务的执行顺序 实现：yield(原生)/gevent/greenlet 比线程消耗更少的资源 对cpu来说，协程就是单线程，cpu不用考虑上下文调度和切换的问题，省去了cpu调度的开销，所有协程在一定程度上要优于线程 协程相当于在单个进程里启动里一个单线程，同时又可以实现多线程的效果 协程本质上是一个线程里面的细分，操作系统层面根本不知道这种区分，只当其是一个线程，程序员自己在应用层面通过yield进行协成间的切换  GIL GIL，即Global Interpreter Lock全局解释器锁，保证任何时刻仅有一个线程在执行。常见例子有CPython（JPython不使用GIL）与Ruby MRI。 不是所有的Python解释器都有GIL。
为什么要有GIL这个东西，不能去掉呢？这是为了实现GC，避免Java里Full GC(stop the world)引入的。更多内容参考 python 线程，GIL 和 ctypes
每个进程一把锁🔒，进程里的线程，只能有一个线程可以获得这把锁，进行工作，其他线程必须等待
在Python语言的主流实现CPython中，GIL 是一个货真价实的全局线程锁，在解释器解释执行任何Python代码时，都需要先获得这把锁才行， 在遇到I/O操作时会释放这把锁。如果是纯计算的程序，没有I/O操作，解释器会每隔100次操作就释放这把锁，让别的线程有机会执行（这个次数可以通过 sys.setcheckinterval 来调整）
同一进程下的多线程共享数据，共享意味着竞争，竞争带来无序，为了数据安全所以需要加锁进行数据保护，GIL本质是一把互斥锁，使并发变为串行， 保证同一时间只有一条线程访问解释器级别的数据，这样就保证了解释器级别的数据安全，同时也带来了一些问题，同一进程只有一条线程执行任务， 无法利用多核优势，解决方案可以根据任务的类型来处理，如果是I/O密集型，则需要开多线程提高效率，如果是计算密集型则需要多进程。
遇到阻塞，普通单线程的做法是就地等待，多线程的做法是转去执行其他线程&amp;ndash;这就是开多线程效率提高的原因。 但如果这种阻塞和放开是我们人为可以预料到的，那么我们可以在阻塞的地方yield返回到另一个可以执行的点，这样也实现了CPU的不浪费，同时还少了线程的切换，效率更高
python锁  python线程
  同步锁（互斥锁）-解决数据安全问题-threading.Lock 递归锁-解决线程死锁-threading.R_Lock Semaphore信号量-threading.Semaphere Event同步事件对象-threading.Event-让两个线程保持同步而不是独立的运行：你给我发个信号，我接到了做一个操作，再给你发一个信号，你接到了一个操作，发下一个信号…… Python中的多线程通信-queue线程队列  </description>
    </item>
    
  </channel>
</rss>