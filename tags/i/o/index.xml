<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I/O on 持之以恒</title>
    <link>/tags/i/o/</link>
    <description>Recent content in I/O on 持之以恒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Oct 2019 09:02:42 +0800</lastBuildDate>
    
	<atom:link href="/tags/i/o/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IO Model</title>
      <link>/blog/2019/10/02/io-model/</link>
      <pubDate>Wed, 02 Oct 2019 09:02:42 +0800</pubDate>
      
      <guid>/blog/2019/10/02/io-model/</guid>
      <description>这里使用udp举例，因为udp状态简单：要么收到数据，要么没有收到；tcp协议相对比较复杂
 五种I/O模型  阻塞I/O Blocking I/O
 非阻塞I/O Non blocking I/O
 多路复用 I/O multiplexing (select and poll)
 信号驱动 Signal driving I/O(SIGIO)
 异步I/O Asynchronous I/O
  两个阶段  第一阶段：wait for data 等待网络里的数据到达，到达后，数据被暂存在内核空间的内核缓冲区 第二阶段：copy data from kernel to user 把数据从内核空间的内核缓冲区拷贝到用户空间的应用进程缓冲区  两个缓冲区  内核缓冲区
 进程缓冲区
  同步与异步  描述的是用户线程与内核的交互方式
  同步指用户线程发起I/O请求后需要等待或者轮询内核I/O操作完成后才能继续执行 异步是指用户线程发起I/O请求后仍然继续执行，当内核I/O操作完成后会通知用户线程，或者调用用户线程注册的回调函数  阻塞与非阻塞  描述是用户线程调用内核I/O操作的方式，
  阻塞是指I/O操作需要彻底完成后才返回到用户空间 非阻塞是指I/O操作被调用后立即返回给用户一个状态值，无需等到I/O操作彻底完成  系统调用  指运行在用户空间的程序向操作系统内核请求需要更高权限运行的服务。当你的代码需要做I/O操作(open、read、write)、或者是进行内存操作、甚至是说要获取一个系统时间，就需要通过系统调用来和内核进行交互 系统调用（system call），指运行在用户空间的程序向操作系统内核请求需要更高权限运行的服务。系统调用提供用户程序与操作系统之间的接口。大多数系统交互式操作需求在内核态运行。如设备IO操作或者进程间通信</description>
    </item>
    
  </channel>
</rss>